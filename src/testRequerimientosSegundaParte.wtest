import Marcas.*
import Carpas.*
import Personas.*

describe "segundaParte"{
	const persona1 = new Belga()
	const persona2 = new Checo()
	const persona3 = new Aleman()
	const carpa1= new Carpa()//Corona
	const carpa2= new Carpa()//Guiness
	const carpa3= new Carpa()//Hofbräu
	const corona = new MarcaCervezaRubia()
	const guiness = new MarcaCervezaNegra()
	const hofbrau = new MarcaCervezaRoja()
	const jarraGuiness = new Jarra()
	
	method initialize(){
		carpa1.marca(corona)
		carpa2.marca(guiness)
		carpa3.marca(hofbrau)
		hofbrau.lupulo(6)
		carpa1.limite(3)
		carpa3.limite(3)
		persona1.peso(50)
		persona1.aguante(20)
		persona3.aguante(29)
		persona3.peso(80)
		jarraGuiness.capacidad(8)
		jarraGuiness.marca(guiness)
		persona3.comprarJarra(jarraGuiness)
		corona.origen("Mexico")
		guiness.origen("Alemania")
		hofbrau.origen("Turca")
	}


	test"unaPersonaQuiereEntrarAUnaCarpa"{
		persona1.musicaTradicional(true)
		carpa1.musicaTradicional(true)
		assert.notThat(persona1.quiereEntrar(carpa1))
		assert.notThat(persona1.quiereEntrar(carpa2))
		carpa3.musicaTradicional(true)
		assert.that(persona1.quiereEntrar(carpa3))
	}
	test"unaCarpaDejaIngresarUnaPersona"{
		carpa2.limite(2)
		assert.that(carpa2.dejaIngresar(persona2))
		carpa2.agregarGente(persona2)
		assert.that(carpa2.dejaIngresar(persona1))
		carpa2.agregarGente(persona1)
		assert.notThat(carpa2.dejaIngresar(persona3))
		
	}
	test"unaPersonaPuedeEntrarAUnaCarpa"{
		assert.that(persona1.quiereEntrar(carpa3))
		assert.that(carpa3.dejaIngresar(persona1))
		assert.that(persona1.puedeEntrar(carpa3))
		
	}
	test"unaPersonaEntreAUnaCarpa"{
		carpa3.agregarGente(persona1)
		assert.notEquals(2,carpa3.cantidadGente())
		carpa3.agregarGente(persona2)
		carpa3.agregarGente(persona3)
		assert.equals(3,carpa3.cantidadGente())
		
	}
	test"unCarpaSirveUnaJarraAUnaPersona"{
		carpa2.agregarGente(persona3)
		assert.that(carpa2.servirJarra(persona3,2))//Acá jode la expresion en la sentencia if
		/*Hacer que una carpa le sirva una jarra de cerveza a una persona. 
		 * Se debe indicar la capacidad de la jarra que se está vendiendo.
		 Si la persona no está en la carpa, generar un error.
		 Nota: es conveniente que el objeto que representa a la jarra vendida 
		 se cree en la acción de servir. La marca es la que vende la carpa, 
		 * la capacidad se está indicando.*/
	}
	test"cuantosEbriosEmpedernidosHayDentroDeUnaCarpa"{
		carpa1.agregarGente(persona1)
		assert.notEquals(2,carpa1.cantidadEbriosEmpedernidos())
		persona1.comprarJarra(jarraGuiness) 
		persona1.comprarJarra(jarraGuiness)
		persona1.comprarJarra(jarraGuiness)
		persona1.comprarJarra(jarraGuiness)
		persona1.comprarJarra(jarraGuiness)
		persona1.comprarJarra(jarraGuiness) 
		assert.equals(1,carpa1.cantidadEbriosEmpedernidos())
		/*Saber cuantos ebrios empedernidos hay dentro de una carpa.
		 *  Los ebrios empedernidos son los ebrios que todas las jarras que compraron, 
		 son de 1 litro ó más.*/
	}
	test"unaPersonaEsPatriota"{
		persona3.comprarJarra(jarraGuiness) 
		persona3.comprarJarra(jarraGuiness) 
		assert.that(persona3.esPatriota())
		persona1.comprarJarra(jarraGuiness) 
		assert.notThat(persona1.esPatriota())
	}
}